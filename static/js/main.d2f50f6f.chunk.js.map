{"version":3,"sources":["components/weather.component.jsx","components/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weatherIcon","temp_celsius","min","max","minmaxTemp","temp_min","temp_max","description","Form","onSubmit","loadweather","type","name","autoComplete","placeholder","error","role","error2","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","cod","setState","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","rangeID","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d2f50f6f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n        <div className=\"container text-light\" >\r\n            <div className=\"cards pt-4\">\r\n                <h1>{props.city}</h1>\r\n                <h5 className=\"py-4\">\r\n                    <i className={`wi ${props.weatherIcon} display-1`}></i>\r\n                </h5>\r\n\r\n                {props.temp_celsius ? (<h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>) : null}\r\n\r\n                {/*show max and min temp*/}\r\n                {minmaxTemp(props.temp_min, props.temp_max)}\r\n\r\n                <h4 className=\"py-3\">{props.description}</h4>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nfunction minmaxTemp(min, max) {\r\n    if (min && max) {\r\n        return (\r\n            <h3>\r\n                <span className=\"px-4\">{min}&deg;</span>\r\n                <span className=\"px-4\">{max}&deg;</span>\r\n            </h3>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport './form.style.css';\r\n\r\nconst Form = props => {\r\n    return (\r\n        <div className=\"container\">\r\n            <form onSubmit={props.loadweather} >\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-3 offset-md-2\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            name=\"city\"\r\n                            autoComplete=\"off\"\r\n                            placeholder=\"City\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-3\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            name=\"country\"\r\n                            autoComplete=\"off\"\r\n                            placeholder=\"Country\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-3 mt-md-0 py-2 text-md-left\">\r\n                        <button className=\"btn btn-warning\">Get Weather</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"mt-4\">{props.error ? error(): null}</div>\r\n                <div className=\"mt-4\">{props.error2 ? error2(): null}</div>\r\n            </form>\r\n        </div>\r\n    )\r\n};\r\n\r\nfunction error(){\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n           Please Enter City and Country\r\n        </div>\r\n    )\r\n};\r\n\r\nfunction error2(){\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n           City or Country Not Found\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Form;","import React, { Component } from 'react';\nimport './App.css';\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport 'weather-icons/css/weather-icons.css'\n\nimport Weather from './components/weather.component';\nimport Form from './components/form.component'\n\n// api call api.openweathermap.org/data/2.5/weather?q=London,uk\n\nconst API_KEY = \"0a53ee15e8d655a6c1795b1b2234e0dc\"\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false,\n      error2: false\n    };\n\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    }\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  };\n\n  get_WeatherIcon(rangeID) {\n    switch (true) {\n      case rangeID >= 200 && rangeID <= 232:\n        this.setState({ icon: this.weatherIcon.Thunderstorm });\n        break;\n      case rangeID >= 300 && rangeID <= 321:\n        this.setState({ icon: this.weatherIcon.Drizzle });\n        break;\n      case rangeID >= 500 && rangeID <= 531:\n        this.setState({ icon: this.weatherIcon.Rain });\n        break; case rangeID >= 600 && rangeID <= 622:\n        this.setState({ icon: this.weatherIcon.Snow });\n        break;\n      case rangeID >= 701 && rangeID <= 781:\n        this.setState({ icon: this.weatherIcon.Atmosphere });\n        break;\n      case rangeID == 800:\n        this.setState({ icon: this.weatherIcon.Clear });\n        break;\n      case rangeID >= 801 && rangeID <= 804:\n        this.setState({ icon: this.weatherIcon.Clouds });\n        break;\n      default:\n        this.setState({ icon: this.weatherIcon.Clouds });\n\n\n    }\n  }\n\n  getWeather = async (e) => {\n\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    if (city && country) {\n\n      const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`)\n\n      const response = await api_call.json();\n\n      if (response.cod == 404) {\n        this.setState({ error2: true })\n        this.setState({ error: false })\n      } else {\n        this.setState({\n          city: `${response.name},${response.sys.country}`,\n          celsius: this.calCelsius(response.main.temp),\n          temp_max: this.calCelsius(response.main.temp_max),\n          temp_min: this.calCelsius(response.main.temp_min),\n          description: response.weather[0].description,\n          error: false,\n          error2: false\n        })\n\n        this.get_WeatherIcon(response.weather[0].id);\n      }\n\n\n    } else {\n      this.setState({ error: true })\n      this.setState({ error2: false })\n    }\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form loadweather={this.getWeather} error={this.state.error} error2={this.state.error2} />\n        <Weather\n          city={this.state.city}\n          country={this.state.country}\n          temp_celsius={this.state.celsius}\n          temp_max={this.state.temp_max}\n          temp_min={this.state.temp_min}\n          description={this.state.description}\n          weatherIcon={this.state.icon}\n        />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}